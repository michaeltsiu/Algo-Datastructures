Objectives
  1. Understand how objects and arrays work, through the lens of Big O
  2. Explain why adding elements to the beginning of an array is costly
  3. Compare and contrast the runtime for arrays and objects, as well as built-in methods

Objects
  - Unordered, key value pairs

  - When to use objects
    - When you don't need order
    - When you need fast access/insertion and removal

  - Big O of objects
    - Insertion: O(1)
    - Removal: O(1)
    - Searching: O(n)
    - Access: O(1)

  - Big O Object Methods
    - Object.key: O(n)
    - Object.values: O(n)
    - Object.entries: O(n)
    - hasOwnProperty: O(1)

Arrays
  - Ordered list

  - When to use arrays
    - When you need order
    - When you need fast access/insertion and removal

  - Big O of Arrays
    - Insertion: O(1) or O(n)
      - unshift(): will be O(n) because it will shift every other index over
    - Removal: O(1) or O(n)
      - shift(): will be O(n) because it will shift every other index over
    - Searching: O(n)
    - Access: O(1)

  - Big O of Array Methods
    - push: O(1)
    - pop: O(1)
    - shift: O(n)
    - unshift: O(n)
    - concat: O(n)
    - slice: O(n)
    - splice: O(n)
    - sort: O(n log n)
    - forEach/map/filter/reduce/etc: O(n)