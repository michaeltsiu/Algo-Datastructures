Objectives
  - Define what an algorithm is
    - A process or set of steps to accomplish a certain task
  - Devise a plan to solve algorithms
  - Compare and contrast problem solving patterns including frequency counters, two pointer problems and divide and conquer

How to improve?
  1. Devise a plan for solving problems
  2. Master common problem solving patterns


Problem solving

  1. Understand the problem
      - Can I restate the problem in my own words?
      - What are the input that go into the problem?
      - What are the outputs that should come from the solution to the problem?
      - Can the outputs be determined from the inputs?
        - In other words, do I have enough info to solve the problem?
      - How should I label the important pieces of data that are a part of the problem?

      Output, Input, Constraints, Edgecases (OICE)

      Ex. Write a function which takes two numbers and returns their sum
        1. implement addition
        2. ints, floats, what about string for large number?
        3. int, float, string?
        4. Do I have enough information to solve the problem?
        5. What kind of variables are needed to solve the problem?

  2. Explore concrete examples
      - Coming up with examples can help you understand the problem better
      - Examples also provide santiy checks that your eventual solution works how it should
      - User stories & unit tests

      Explore Examples
        Ex. Write a function which takes in a string and returns counts of each character in the string.
        - Start with simple examples
            charCount("aaa"); // {a:4}
            charCount("hello"); // {h:1, e:1, l:2, o:1}
        - Progress to more complex examples
            "My phone number is 182763" -> do we want numbers, spaces?
            "Hello hi" -> Should upper/lower case matter? what about spacing
        - Explore examples with empty inputs
            charCount("") -> return undefined, null, error?
        - Explore examples with invalid inputs
            understanding edgecases

  3. Break it down
      - Explicitly write out the steps you need to take
          Forces you to think about the code you'll write and helps catch any issues before you start
        Ex. Write a function which takes in a string and returns counts of each character in the string.
          function charCount(str) {
            // make object to return at end
            // loop over string, for each character..
              // if the char is a number/letter AND is a key in object, add one to count
              // if the char is a number/letter AND not in the object, add it to object and set value to 1
              // if character is something else (space, period, etc) don't do anything
            // return object at end
          }

  4. Solve/simplify
      - Find the core difficulty in what you're trying to do
      - Temporarily ignore that difficulty
      - Write a simplified solution
      - Then incorporate that difficulty back in
      Ex. Write a function that takes in a string and returns counts of each character in the string.
          function charCount(str) {
            // make object to return at end
            let result = {};
            // loop over string, for each character..
            for (let i = 0; i < str.length; i++) {
              // make the character a lowercase
              let char = str[i].toLowerCase();
              // if the char is a letter or number
              if (/[a-z0-9]/.test(char)) {
                // if the char is a number/letter AND is a key in object
                if (result[char] > 0) {
                  // add one to count
                  result[char]++;
                }
                // if the char is a number/letter AND not in the object
                else {
                  // add it to object and set value to 1
                  result[char] = 1;
                };
              }
              // if character is something else (space, period, etc) don't do anything
            }
            // return object at end
            return result;
          }

  5. Look back and refactor
      Refactoring questions
        - Can you check the result?
        - Can you derive the result differently?
        - Can you understand it at a glance?
        - Can you use the result or method for some other problem?
        - Can you improve the performance of your solution?
        - Can you think of other ways to refacor?
        - How have other people solved this problem?
      Ex. Write a function that takes in a string and returns counts of each character in the string.
        function charCount(str) {
          let obj = {};
          for (let char of str) {
            if (isAlphaNumeric(char)) {
              char = char.toLowerCase();
              obj[char] = ++obj[char] || 1;
            }
          }
          return obj;
        }

        function isAlphaNumeric(char) {
          let code = char.charCodeAt(0);
          if (!(code > 47 && code < 58) && // numeric (0-9)
              !(code > 64 && code < 91) && // upper alpha (A-Z)
              !(code > 96 && code < 123)) { // lower alpha (a-z)
            return false;
          }
          return true;
        }
