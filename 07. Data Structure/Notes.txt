What do they do?
  - Data structures are collections of values, the relationships among them, and the functions or operations that can be applied to the Data
Why so many??
  - Different data structures excel at different things. Some are highly specialized, while others (like arrays) are more generally used.
Why care?
  - The more time you spend as a developer, the more likely you'll need to use one of these data structures
  - You've already worked with many of them unknowingly! (working with DOM = TREE)
  - Interviews
There is no best datastructure as they all excel in different situations

Class Syntax Overview
  - Object Oriented Programming (OOP)
  - Class: A blueprint for creating objects with pre-defined properties and methods
    - Syntatic sugar over js, introduces prototypes
  - Syntax
    Ex. class Student {
          constructor(firstName, lastName, year) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.grade = year;
          }
        }
        let firstStudent = new Student("Colt", "Steele", 4);
        let secondStudent = new Student("Michael", "Siu", 1);

Instance methods
  Ex. class Student {
        constructor(firstName, lastName) {
          this.firstName = firstName;
          this.lastName = lastName;
          this.tardies = 0;
          this.scores = [];
        }
        fullName() {
          return `Your full name is ${this.firstName} ${this.lastName}.`;
        }
        markLate() {
          this.tardies += 1;
          if (this.tardies >= 3) return "YOU ARE EXPELLED"!
          return `${this.firstName} ${this.lastName} has been late ${this.tardies} times.`;
        }
        addSCore(score) {
          this.scores.push(score);
          return this.scores;
        }
        calculateAverage() {
          let sum = this.scores.reduce((a, b) => a + b)
          return sum/this.scores.length;
        }
      }
      let firstStudent = new Student("Colt", "Steele");
      firstName.fullName() // "Your full name is Colt Steele"

Class Methods (not common)
  Ex. class Student {
        constructor(firstName, lastName) {
          this.firstName = firstName;
          this.lastName = lastName;
        }
        fullName() {
          return `Your full name is ${this.firstName} ${this.lastName}`;
        }
        static enrollStudents(...students) {
          // maybe send an email here
          return "ENROLLING STUDENTS!"
        }
      }
      let firstStudent = new Student("Colt", "Steele");
      let secondStudent = new Student("Blue", "Steele");
      Student.enrollStudents([firstStudent, secondStudent]);
  How we'll be using classes
    Ex. class DataStructure() {
          constructor() {
            // what default properties should it have?
          }
          someInstanceMethod() {
            // what should each object created from this class be able to do?
          }
        }
  One gotcha with 'this'
    Inside all of our instance methods and constructor, the keyword `this` refers to the object created from that class (also known as instance)

Recap
  - Classes are blueprints that when created make objects known as instances
  - Classes are created with the new keyword
  - The constructor function is a special function that gets run when the class is instantiated
  - Instance methods can be added to classes similar to methods in objects
  - Class methods can be added using the static keyword